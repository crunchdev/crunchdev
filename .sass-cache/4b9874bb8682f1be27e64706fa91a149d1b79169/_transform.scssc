3.1.18 (Brainy Betty)
b275670dbda9a1e1d3d991a86dcf7e19f28e0ea0
o:Sass::Tree::RootNode
:@template"ÑH@import "shared";

// @doc off
// Note ----------------------------------------------------------------------
// Safari, Chrome, and Firefox all support 3D transforms. However,
// only in the most recent builds. You should also provide fallback 2d support for
// Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
// To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
// to switch between the two support lists. The toggle defaults to 'false' (2D),
// and also accepts 'true' (3D). Currently the lists are as follows:
// 2D: Mozilla, Webkit, Opera, Official
// 3D: Webkit, Firefox.

// Available Transforms ------------------------------------------------------
// - Scale (2d and 3d)
// - Rotate (2d and 3d)
// - Translate (2d and 3d)
// - Skew (2d only)

// Transform Parameters ------------------------------------------------------
// - Transform Origin (2d and 3d)
// - Perspective (3d)
// - Perspective Origin (3d)
// - Transform Style (3d)
// - Backface Visibility (3d)

// Mixins --------------------------------------------------------------------
// transform-origin
//  - shortcuts:  transform-origin2d, transform-origin3d
//  - helpers:    apply-origin
// transform
//  - shortcuts:  transform2d, transform3d
//  - helpers:    simple-transform, create-transform
// perspective
//  - helpers:    perspective-origin
// transform-style
// backface-visibility
// scale
//  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
// rotate
//  - shortcuts:  rotateX, rotateY, rotate3d
// translate
//  - shortcuts:  translateX, translateY, translateZ, translate3d
// skew
//  - shortcuts:  skewX, skewY

// Defaults ------------------------------------------------------------------
// @doc on

// The default x-origin for transforms
$default-origin-x    : 50%                   !default;
// The default y-origin for transforms
$default-origin-y    : 50%                   !default;
// The default z-origin for transforms
$default-origin-z    : 50%                   !default;


// The default x-multiplier for scaling
$default-scale-x     : 1.25                  !default;
// The default y-multiplier for scaling
$default-scale-y     : $default-scale-x      !default;
// The default z-multiplier for scaling
$default-scale-z     : $default-scale-x      !default;


// The default angle for rotations
$default-rotate      : 45deg                 !default;


// The default x-vector for the axis of 3d rotations
$default-vector-x    : 1                     !default;
// The default y-vector for the axis of 3d rotations
$default-vector-y    : 1                     !default;
// The default z-vector for the axis of 3d rotations
$default-vector-z    : 1                     !default;


// The default x-length for translations
$default-translate-x : 1em                   !default;
// The default y-length for translations
$default-translate-y : $default-translate-x  !default;
// The default z-length for translations
$default-translate-z : $default-translate-x  !default;


// The default x-angle for skewing
$default-skew-x      : 5deg                  !default;
// The default y-angle for skewing
$default-skew-y      : 5deg                  !default;


// **Transform-origin**
// Transform-origin sent as a complete string
//
//     @include apply-origin( origin [, 3D-only ] )
//
// where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
// in percentages, absolute (px, cm, in, em etc..) or relative
// (left, top, right, bottom, center) units
//
// @param only3d Set this to true to only apply this
// mixin where browsers have 3D support.
@mixin apply-origin($origin, $only3d) {
  $only3d: $only3d or -compass-list-size(-compass-list($origin)) > 2;
  @if $only3d {
    @include experimental(transform-origin, $origin,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform-origin, $origin,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Transform-origin sent as individual arguments:
//
//     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
//
// where the 3 'origin-' arguments represent x/y/z coordinates.
//
// **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support
@mixin transform-origin(
  $origin-x: $default-origin-x,
  $origin-y: $default-origin-y,
  $origin-z: false,
  $only3d:   if($origin-z, true, false)
) {
  $origin: unquote('');
  @if $origin-x or $origin-y or $origin-z {
    @if $origin-x { $origin: $origin-x; } @else { $origin: 50%; }
    @if $origin-y { $origin: $origin $origin-y; } @else { @if $origin-z { $origin: $origin 50%; }}
    @if $origin-z { $origin: $origin $origin-z; }
    @include apply-origin($origin, $only3d);
  }
}


// Transform sent as a complete string:
//
//     @include transform( transforms [, 3D-only ] )
//
// where 'transforms' is a space separated list of all the transforms to be applied
@mixin transform(
  $transform,
  $only3d: false
) {
  @if $only3d {
    @include experimental(transform, $transform,
      not -moz, -webkit, not -o, not -ms, not -khtml, official
    );
  } @else {
    @include experimental(transform, $transform,
      -moz, -webkit, -o, -ms, not -khtml, official
    );
  }
}

// Shortcut to target all browsers with 2D transform support
@mixin transform2d($trans) {
  @include transform($trans, false);
}

// Shortcut to target only browsers with 3D transform support
@mixin transform3d($trans) {
  @include transform($trans, true);
}

// @doc off
// 3D Parameters -------------------------------------------------------------
// @doc on

// Set the perspective of 3D transforms on the children of an element:
//
//      @include perspective( perspective )
//
// where 'perspective' is a uniless number representing the depth of the z-axis
// the higher the perspective, the more exagerated the foreshortening.
// values from 500 to 1000 are more-or-less "normal" - a good starting-point.
@mixin perspective($p) {
  @include experimental(perspective, $p,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Set the origin position for the perspective
//
//      @include perspective-origin(origin-x [origin-y])
//
// where the two arguments represent x/y coordinates
@mixin perspective-origin($origin: 50%) {
  @include experimental(perspective-origin, $origin,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine whether a 3D objects children also live in the given 3D space
//
//      @include transform-style( [ style ] )
//
// where `style` can be either `flat` or `preserve-3d`
// browsers default to `flat`, mixin defaults to `preserve-3d`
@mixin transform-style($style: preserve-3d) {
  @include experimental(transform-style, $style,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// Determine the visibility of an element when it's back is turned
//
//     @include backface-visibility( [ visibility ] )
//
// where `visibility` can be either `visible` or `hidden`
// browsers default to visible, mixin defaults to hidden
@mixin backface-visibility($visibility: hidden) {
  @include experimental(backface-visibility, $visibility,
    not -moz, -webkit, not -o, not -ms, not -khtml, official
  );
}

// @doc off
// Transform Partials --------------------------------------------------------
// These work well on their own, but they don't add to each other, they override.
// Use along with transform parameter mixins to adjust origin, perspective and style
// ---------------------------------------------------------------------------


// Scale ---------------------------------------------------------------------
// @doc on

// Scale an object along the x and y axis:
//
//      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
//
// where the 'scale-' arguments are unitless multipliers of the x and y dimensions
// and perspective, which works the same as the stand-alone perspective property/mixin
// but applies to the individual element (multiplied with any parent perspective)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale(
  $scale-x:     $default-scale-x,
  $scale-y:     $scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scale($scale-x, $scale-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the x axis
// @include scaleX( [ scale-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleX(
  $scale:       $default-scale-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleX($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the y axis
// @include scaleY( [ scale-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleY(
  $scale:       $default-scale-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: scaleY($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Scale an object along the z axis
// @include scaleZ( [ scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scaleZ(
  $scale: $default-scale-z,
  $perspective: false
) {
  $trans: scaleZ($scale);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Scale and object along all three axis
// @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin scale3d(
  $scale-x:     $default-scale-x,
  $scale-y:     $default-scale-y,
  $scale-z:     $default-scale-z,
  $perspective: false
) {
  $trans: scale3d($scale-x, $scale-y, $scale-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Rotate --------------------------------------------------------------------
// @doc on

// Rotate an object around the z axis  (2D)
// @include rotate( [ rotation, perspective, 3D-only ] )
// where 'rotation' is an angle set in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  $trans: rotate($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// A longcut for 'rotate' in case you forget that 'z' is implied
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateZ(
  $rotate:      $default-rotate,
  $perspective: false,
  $only3d:      false
) {
  @include rotate($rotate, $perspective, $only3d);
}

// Rotate an object around the x axis (3D)
// @include rotateX( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateX(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateX($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around the y axis (3D)
// @include rotate( [ rotation, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotateY(
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotateY($rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Rotate an object around an arbitrary axis (3D)
// @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
// where the 'vector-' arguments accept unitless numbers
// these numbers are not important on their own, but in relation to one another
// creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin rotate3d(
  $vector-x: $default-vector-x,
  $vector-y: $default-vector-y,
  $vector-z: $default-vector-z,
  $rotate: $default-rotate,
  $perspective: false
) {
  $trans: rotate3d($vector-x, $vector-y, $vector-z, $rotate);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Translate -----------------------------------------------------------------
// @doc on

// Move an object along the x or y axis (2D)
// @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
// where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translate($translate-x, $translate-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the x axis (2D)
// @include translate( [ translate-x, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateX(
  $trans-x:     $default-translate-x,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateX($trans-x);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the y axis (2D)
// @include translate( [ translate-y, perspective, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateY(
  $trans-y:     $default-translate-y,
  $perspective: false,
  $only3d:      false
) {
  $trans: translateY($trans-y);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform($trans, $only3d);
}

// Move an object along the z axis (3D)
// @include translate( [ translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translateZ(
  $trans-z:     $default-translate-z,
  $perspective: false
) {
  $trans: translateZ($trans-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// Move an object along the x, y and z axis (3D)
// @include translate( [ translate-x, translate-y, translate-z, perspective ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin translate3d(
  $translate-x: $default-translate-x,
  $translate-y: $default-translate-y,
  $translate-z: $default-translate-z,
  $perspective: false
) {
  $trans: translate3d($translate-x, $translate-y, $translate-z);
  @if $perspective { $trans: perspective($perspective) $trans; }
  @include transform3d($trans);
}

// @doc off
// Skew ----------------------------------------------------------------------
// @doc on

// Skew an element:
//
//     @include skew( [ skew-x, skew-y, 3D-only ] )
//
// where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skew(
  $skew-x: $default-skew-x,
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skew($skew-x, $skew-y);
  @include transform($trans, $only3d);
}

// Skew an element along the x axiz
//
//     @include skew( [ skew-x, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewX(
  $skew-x: $default-skew-x,
  $only3d: false
) {
  $trans: skewX($skew-x);
  @include transform($trans, $only3d);
}

// Skew an element along the y axis
//
//     @include skew( [ skew-y, 3D-only ] )
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin skewY(
  $skew-y: $default-skew-y,
  $only3d: false
) {
  $trans: skewY($skew-y);
  @include transform($trans, $only3d);
}


// Full transform mixins
// For settings any combination of transforms as arguments
// These are complex and not highly recommended for daily use
// They are mainly here for backwards-compatability purposes
//
// * they include origin adjustments
// * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
//
// **Note** This mixin cannot be combined with other transform mixins.
@mixin create-transform(
  $perspective: false,
  $scale-x:     false,
  $scale-y:     false,
  $scale-z:     false,
  $rotate-x:    false,
  $rotate-y:    false,
  $rotate-z:    false,
  $rotate3d:    false,
  $trans-x:     false,
  $trans-y:     false,
  $trans-z:     false,
  $skew-x:      false,
  $skew-y:      false,
  $origin-x:    false,
  $origin-y:    false,
  $origin-z:    false,
  $only3d:      false
) {
  $trans: unquote("");

  // perspective
  @if $perspective { $trans: perspective($perspective) ; }

  // scale
  @if $scale-x and $scale-y {
    @if $scale-z { $trans: $trans scale3d($scale-x, $scale-y, $scale-z); }
    @else { $trans: $trans scale($scale-x, $scale-y); }
  } @else {
    @if $scale-x { $trans: $trans scaleX($scale-x); }
    @if $scale-y { $trans: $trans scaleY($scale-y); }
    @if $scale-z { $trans: $trans scaleZ($scale-z); }
  }

  // rotate
  @if $rotate-x { $trans: $trans rotateX($rotate-x); }
  @if $rotate-y { $trans: $trans rotateY($rotate-y); }
  @if $rotate-z { $trans: $trans rotateZ($rotate-z); }
  @if $rotate3d { $trans: $trans rotate3d($rotate3d); }

  // translate
  @if $trans-x and $trans-y {
    @if $trans-z { $trans: $trans translate3d($trans-x, $trans-y, $trans-z); }
    @else { $trans: $trans translate($trans-x, $trans-y); }
  } @else {
    @if $trans-x { $trans: $trans translateX($trans-x); }
    @if $trans-y { $trans: $trans translateY($trans-y); }
    @if $trans-z { $trans: $trans translateZ($trans-z); }
  }

  // skew
  @if $skew-x and $skew-y { $trans: $trans skew($skew-x, $skew-y); }
  @else {
    @if $skew-x { $trans: $trans skewX($skew-x); }
    @if $skew-y { $trans: $trans skewY($skew-y); }
  }

  // apply it!
  @include transform($trans, $only3d);
  @include transform-origin($origin-x, $origin-y, $origin-z, $only3d);
}


// A simplified set of options
// backwards-compatible with the previous version of the 'transform' mixin
@mixin simple-transform(
  $scale:    false,
  $rotate:   false,
  $trans-x:  false,
  $trans-y:  false,
  $skew-x:   false,
  $skew-y:   false,
  $origin-x: false,
  $origin-y: false
) {
  @include create-transform(
    false,
    $scale, $scale, false,
    false, false, $rotate, false,
    $trans-x, $trans-y, false,
    $skew-x, $skew-y,
    $origin-x, $origin-y, false,
    false
  );
}
:@children[io:Sass::Tree::ImportNode
;0;[ :
@linei:@imported_filename"shared:@options{ o:Sass::Tree::CommentNode:
@loud0:@value["p/* @doc off
 * Note ----------------------------------------------------------------------
 * Safari, Chrome, and Firefox all support 3D transforms. However,
 * only in the most recent builds. You should also provide fallback 2d support for
 * Opera and IE. IE10 is slated to have 3d enabled, but is currently unreleased.
 * To make that easy, all 2D transforms include an browser-targeting toggle ($only3d)
 * to switch between the two support lists. The toggle defaults to 'false' (2D),
 * and also accepts 'true' (3D). Currently the lists are as follows:
 * 2D: Mozilla, Webkit, Opera, Official
 * 3D: Webkit, Firefox. */;[ :@silenti ;	i;@o;;0;["¯/* Available Transforms ------------------------------------------------------
 * - Scale (2d and 3d)
 * - Rotate (2d and 3d)
 * - Translate (2d and 3d)
 * - Skew (2d only) */;[ ;i ;	i;@o;;0;["Þ/* Transform Parameters ------------------------------------------------------
 * - Transform Origin (2d and 3d)
 * - Perspective (3d)
 * - Perspective Origin (3d)
 * - Transform Style (3d)
 * - Backface Visibility (3d) */;[ ;i ;	i;@o;;0;["p/* Mixins --------------------------------------------------------------------
 * transform-origin
 *  - shortcuts:  transform-origin2d, transform-origin3d
 *  - helpers:    apply-origin
 * transform
 *  - shortcuts:  transform2d, transform3d
 *  - helpers:    simple-transform, create-transform
 * perspective
 *  - helpers:    perspective-origin
 * transform-style
 * backface-visibility
 * scale
 *  - shortcuts:  scaleX, scaleY, scaleZ, scale3d
 * rotate
 *  - shortcuts:  rotateX, rotateY, rotate3d
 * translate
 *  - shortcuts:  translateX, translateY, translateZ, translate3d
 * skew
 *  - shortcuts:  skewX, skewY */;[ ;i ;	i ;@o;;0;["a/* Defaults ------------------------------------------------------------------
 * @doc on */;[ ;i ;	i4;@o;;0;["./* The default x-origin for transforms */;[ ;i ;	i7;@o:Sass::Tree::VariableNode;[ :
@name"default-origin-x:@guarded"!default;	i8:
@expro:Sass::Script::Number:@original"50%;i7:@denominator_units[ :@numerator_units["%;	i8;@;@o;;0;["./* The default y-origin for transforms */;[ ;i ;	i9;@o;;[ ;"default-origin-y;"!default;	i:;o;;"50%;i7;[ ;["%;	i:;@;@o;;0;["./* The default z-origin for transforms */;[ ;i ;	i;;@o;;[ ;"default-origin-z;"!default;	i<;o;;"50%;i7;[ ;["%;	i<;@;@o;;0;["//* The default x-multiplier for scaling */;[ ;i ;	i?;@o;;[ ;"default-scale-x;"!default;	i@;o;;"	1.25;f	1.25;[ ;[ ;	i@;@;@o;;0;["//* The default y-multiplier for scaling */;[ ;i ;	iA;@o;;[ ;"default-scale-y;"!default;	iB;o:Sass::Script::Variable	;"default-scale-x:@underscored_name"default_scale_x;	iB;@;@o;;0;["//* The default z-multiplier for scaling */;[ ;i ;	iC;@o;;[ ;"default-scale-z;"!default;	iD;o;	;"default-scale-x;"default_scale_x;	iD;@;@o;;0;["*/* The default angle for rotations */;[ ;i ;	iG;@o;;[ ;"default-rotate;"!default;	iH;o;;"
45deg;i2;[ ;["deg;	iH;@;@o;;0;["</* The default x-vector for the axis of 3d rotations */;[ ;i ;	iK;@o;;[ ;"default-vector-x;"!default;	iL;o;;"1;i;@R;[ ;	iL;@;@o;;0;["</* The default y-vector for the axis of 3d rotations */;[ ;i ;	iM;@o;;[ ;"default-vector-y;"!default;	iN;o;;"1;i;@R;[ ;	iN;@;@o;;0;["</* The default z-vector for the axis of 3d rotations */;[ ;i ;	iO;@o;;[ ;"default-vector-z;"!default;	iP;o;;"1;i;@R;[ ;	iP;@;@o;;0;["0/* The default x-length for translations */;[ ;i ;	iS;@o;;[ ;"default-translate-x;"!default;	iT;o;;"1em;i;[ ;["em;	iT;@;@o;;0;["0/* The default y-length for translations */;[ ;i ;	iU;@o;;[ ;"default-translate-y;"!default;	iV;o;	;"default-translate-x;"default_translate_x;	iV;@;@o;;0;["0/* The default z-length for translations */;[ ;i ;	iW;@o;;[ ;"default-translate-z;"!default;	iX;o;	;"default-translate-x;"default_translate_x;	iX;@;@o;;0;["*/* The default x-angle for skewing */;[ ;i ;	i[;@o;;[ ;"default-skew-x;"!default;	i\;o;;"	5deg;i
;[ ;["deg;	i\;@;@o;;0;["*/* The default y-angle for skewing */;[ ;i ;	i];@o;;[ ;"default-skew-y;"!default;	i^;o;;"	5deg;i
;[ ;["deg;	i^;@;@o;;0;["/* **Transform-origin**
 * Transform-origin sent as a complete string
 *
 *     @include apply-origin( origin [, 3D-only ] )
 *
 * where 'origin' is a space separated list containing 1-3 (x/y/z) coordinates
 * in percentages, absolute (px, cm, in, em etc..) or relative
 * (left, top, right, bottom, center) units
 *
 * @param only3d Set this to true to only apply this
 * mixin where browsers have 3D support. */;[ ;i ;	ia;@o:Sass::Tree::MixinDefNode;[o;;[ ;"only3d;0;	im;o:Sass::Script::Operation
:@operand2o;
;o;;"2;i;@R;[ ;	im;@:@operand1o:Sass::Script::Funcall
:@keywords{ :
@args[o;
;{ ; [o;	;"origin;"origin;	im;@;"-compass-list;	im;@;"-compass-list-size;	im;@;	im;@:@operator:gt;o;	;"only3d;"only3d;	im;@;	im;@;!:or;@u:Sass::Tree::IfNode [o:Sass::Script::Variable	:
@name"only3d:@underscored_name"only3d:
@linein:@options{ u:Sass::Tree::IfNodeÚ[00[o:Sass::Tree::MixinNode:@children[ :@keywords{ :
@args[o:Sass::Script::String	:@value"transform-origin:
@type:identifier:
@lineis:@options{ o:Sass::Script::Variable	:
@name"origin:@underscored_name"origin;is;@o;		;
"	-moz;;;it;@o;		;
"-webkit;;;it;@o;		;
"-o;;;it;@o;		;
"-ms;;;it;@o:!Sass::Script::UnaryOperation	:@operando;		;
"-khtml;;;it;@;it;@:@operator:noto;		;
"official;;;it;@;"experimental;iu;@[o:Sass::Tree::MixinNode:@children[ :@keywords{ :
@args[o:Sass::Script::String	:@value"transform-origin:
@type:identifier;io;	@	o; 	;"origin;"origin;io;	@	o:!Sass::Script::UnaryOperation	:@operando;	;"	-moz;;;ip;	@	;ip;	@	:@operator:noto;	;"-webkit;;;ip;	@	o;	;o;	;"-o;;;ip;	@	;ip;	@	;;o;	;o;	;"-ms;;;ip;	@	;ip;	@	;;o;	;o;	;"-khtml;;;ip;	@	;ip;	@	;;o;	;"official;;;ip;	@	;"experimental;iq;	@	; [[o;;"origin;"origin;@0[o;;"only3d;"only3d;@0;"apply-origin:@has_childrenT;	il;@o;;0;["#/* Transform-origin sent as individual arguments:
 *
 *     @include transform-origin( [ origin-x, origin-y, origin-z, 3D-only ] )
 *
 * where the 3 'origin-' arguments represent x/y/z coordinates.
 *
 * **NOTE:** setting z coordinates triggers 3D support list, leave false for 2D support */;[ ;i ;	iy;@o;;[o;;[ ;"origin;0;	i;o;
;{ ; [o:Sass::Script::String	;" :
@type:string;	i;@;"unquote;	i;@;@u;$[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@name"origin-z:@underscored_name"origin_z:
@linei:@options{ :@operand1o; 
;o;	;"origin-y;	"origin_y;
i;@
;o;	;"origin-x;	"origin_x;
i;@
;
i;@
:@operator:or;
i;@
;;0[	u:Sass::Tree::IfNode¾[o:Sass::Script::Variable	:
@name"origin-x:@underscored_name"origin_x:
@linei:@options{ u:Sass::Tree::IfNodeÐ[00[o:Sass::Tree::VariableNode:@children[ :
@name"origin:@guarded0:
@linei:
@expro:Sass::Script::Number:@original"50%:@valuei7:@denominator_units[ :@numerator_units["%;	i:@options{ ;@[o:Sass::Tree::VariableNode:@children[ ;"origin:@guarded0;i:
@expro; 	;"origin-x;"origin_x;i;	@	;	@	u;Þ[o:Sass::Script::Variable	:
@name"origin-y:@underscored_name"origin_y:
@linei:@options{ u:Sass::Tree::IfNode[00[u:Sass::Tree::IfNoder[o:Sass::Script::Variable	:
@name"origin-z:@underscored_name"origin_z:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"origin:@guarded0;i:
@expro:Sass::Script::List	:@value[o; 	;"origin;"origin;i;	@	o:Sass::Script::Number:@original"50%;i7:@denominator_units[ :@numerator_units["%;i;	@	;i;	@	:@separator:
space;	@	[o:Sass::Tree::VariableNode:@children[ ;"origin:@guarded0;i:
@expro:Sass::Script::List	:@value[o; 	;"origin;"origin;i;	@	o; 	;"origin-y;"origin_y;i;	@	;i;	@	:@separator:
space;	@	u;5[o:Sass::Script::Variable	:
@name"origin-z:@underscored_name"origin_z:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"origin:@guarded0;i:
@expro:Sass::Script::List	:@value[o; 	;"origin;"origin;i;	@	o; 	;"origin-z;"origin_z;i;	@	;i;	@	:@separator:
space;	@	o:Sass::Tree::MixinNode:@children[ :@keywords{ :
@args[o;	;"origin;	"origin;
i;@
o;	;"only3d;	"only3d;
i;@
;"apply-origin;
i;@
; [	[o;;"origin-x;"origin_x;@o;	;"default-origin-x;"default_origin_x;	i|;@[o;;"origin-y;"origin_y;@o;	;"default-origin-y;"default_origin_y;	i};@[o;;"origin-z;"origin_z;@o:Sass::Script::Bool;F;	i~;@[o;;"only3d;"only3d;@o;
;{ ; [o;	;"origin-z;"origin_z;	i;@o;);T;	i;@o;);F;	i;@;"if;	i;@;"transform-origin;%T;	i;@o;;0;["¹/* Transform sent as a complete string:
 *
 *     @include transform( transforms [, 3D-only ] )
 *
 * where 'transforms' is a space separated list of all the transforms to be applied */;[ ;i ;	i;@o;;[u;$6[o:Sass::Script::Variable	:
@name"only3d:@underscored_name"only3d:
@linei:@options{ u:Sass::Tree::IfNodeã[00[o:Sass::Tree::MixinNode:@children[ :@keywords{ :
@args[o:Sass::Script::String	:@value"transform:
@type:identifier:
@linei:@options{ o:Sass::Script::Variable	:
@name"transform:@underscored_name"transform;i;@o;		;
"	-moz;;;i;@o;		;
"-webkit;;;i;@o;		;
"-o;;;i;@o;		;
"-ms;;;i;@o:!Sass::Script::UnaryOperation	:@operando;		;
"-khtml;;;i;@;i;@:@operator:noto;		;
"official;;;i;@;"experimental;i;@[o:Sass::Tree::MixinNode:@children[ :@keywords{ :
@args[o:Sass::Script::String	:@value"transform:
@type:identifier;i;	@	o; 	;"transform;"transform;i;	@	o:!Sass::Script::UnaryOperation	:@operando;	;"	-moz;;;i;	@	;i;	@	:@operator:noto;	;"-webkit;;;i;	@	o;	;o;	;"-o;;;i;	@	;i;	@	;;o;	;o;	;"-ms;;;i;	@	;i;	@	;;o;	;o;	;"-khtml;;;i;	@	;i;	@	;;o;	;"official;;;i;	@	;"experimental;i;	@	; [[o;;"transform;"transform;@0[o;;"only3d;"only3d;@o;);F;	i;@;"transform;%T;	i;@o;;0;["D/* Shortcut to target all browsers with 2D transform support */;[ ;i ;	i;@o;;[o:Sass::Tree::MixinNode;[ ;{ ; [o;	;"
trans;"
trans;	i¡;@o;);F;	i¡;@;"transform;	i¡;@; [[o;;"
trans;"
trans;@0;"transform2d;%T;	i ;@o;;0;["E/* Shortcut to target only browsers with 3D transform support */;[ ;i ;	i¤;@o;;[o;*;[ ;{ ; [o;	;"
trans;"
trans;	i¦;@o;);T;	i¦;@;"transform;	i¦;@; [[o;;"
trans;"
trans;@0;"transform3d;%T;	i¥;@o;;0;["m/* @doc off
 * 3D Parameters -------------------------------------------------------------
 * @doc on */;[ ;i ;	i©;@o;;0;["`/* Set the perspective of 3D transforms on the children of an element:
 *
 *      @include perspective( perspective )
 *
 * where 'perspective' is a uniless number representing the depth of the z-axis
 * the higher the perspective, the more exagerated the foreshortening.
 * values from 500 to 1000 are more-or-less "normal" - a good starting-point. */;[ ;i ;	i­;@o;;[o;*;[ ;{ ; [o;&	;"perspective;':identifier;	iµ;@o;	;"p;"p;	iµ;@o:!Sass::Script::UnaryOperation	:@operando;&	;"	-moz;';+;	i¶;@;	i¶;@;!:noto;&	;"-webkit;';+;	i¶;@o;,	;-o;&	;"-o;';+;	i¶;@;	i¶;@;!;.o;,	;-o;&	;"-ms;';+;	i¶;@;	i¶;@;!;.o;,	;-o;&	;"-khtml;';+;	i¶;@;	i¶;@;!;.o;&	;"official;';+;	i¶;@;"experimental;	i·;@; [[o;;"p;"p;@0;"perspective;%T;	i´;@o;;0;["¥/* Set the origin position for the perspective
 *
 *      @include perspective-origin(origin-x [origin-y])
 *
 * where the two arguments represent x/y coordinates */;[ ;i ;	iº;@o;;[o;*;[ ;{ ; [o;&	;"perspective-origin;';+;	iÀ;@o;	;"origin;"origin;	iÀ;@o;,	;-o;&	;"	-moz;';+;	iÁ;@;	iÁ;@;!;.o;&	;"-webkit;';+;	iÁ;@o;,	;-o;&	;"-o;';+;	iÁ;@;	iÁ;@;!;.o;,	;-o;&	;"-ms;';+;	iÁ;@;	iÁ;@;!;.o;,	;-o;&	;"-khtml;';+;	iÁ;@;	iÁ;@;!;.o;&	;"official;';+;	iÁ;@;"experimental;	iÂ;@; [[o;;"origin;"origin;@o;;"50%;i7;[ ;["%;	i¿;@;"perspective-origin;%T;	i¿;@o;;0;["÷/* Determine whether a 3D objects children also live in the given 3D space
 *
 *      @include transform-style( [ style ] )
 *
 * where `style` can be either `flat` or `preserve-3d`
 * browsers default to `flat`, mixin defaults to `preserve-3d` */;[ ;i ;	iÅ;@o;;[o;*;[ ;{ ; [o;&	;"transform-style;';+;	iÌ;@o;	;"
style;"
style;	iÌ;@o;,	;-o;&	;"	-moz;';+;	iÍ;@;	iÍ;@;!;.o;&	;"-webkit;';+;	iÍ;@o;,	;-o;&	;"-o;';+;	iÍ;@;	iÍ;@;!;.o;,	;-o;&	;"-ms;';+;	iÍ;@;	iÍ;@;!;.o;,	;-o;&	;"-khtml;';+;	iÍ;@;	iÍ;@;!;.o;&	;"official;';+;	iÍ;@;"experimental;	iÎ;@; [[o;;"
style;"
style;@o;&	;"preserve-3d;';+;	iË;@;"transform-style;%T;	iË;@o;;0;["ô/* Determine the visibility of an element when it's back is turned
 *
 *     @include backface-visibility( [ visibility ] )
 *
 * where `visibility` can be either `visible` or `hidden`
 * browsers default to visible, mixin defaults to hidden */;[ ;i ;	iÑ;@o;;[o;*;[ ;{ ; [o;&	;"backface-visibility;';+;	iØ;@o;	;"visibility;"visibility;	iØ;@o;,	;-o;&	;"	-moz;';+;	iÙ;@;	iÙ;@;!;.o;&	;"-webkit;';+;	iÙ;@o;,	;-o;&	;"-o;';+;	iÙ;@;	iÙ;@;!;.o;,	;-o;&	;"-ms;';+;	iÙ;@;	iÙ;@;!;.o;,	;-o;&	;"-khtml;';+;	iÙ;@;	iÙ;@;!;.o;&	;"official;';+;	iÙ;@;"experimental;	iÚ;@; [[o;;"visibility;"visibility;@o;&	;"hidden;';+;	i×;@;"backface-visibility;%T;	i×;@o;;0;["S/* @doc off
 * Transform Partials --------------------------------------------------------
 * These work well on their own, but they don't add to each other, they override.
 * Use along with transform parameter mixins to adjust origin, perspective and style
 * --------------------------------------------------------------------------- */;[ ;i ;	iÝ;@o;;0;["a/* Scale ---------------------------------------------------------------------
 * @doc on */;[ ;i ;	iä;@o;;0;["¾/* Scale an object along the x and y axis:
 *
 *      @include scale( [ scale-x, scale-y, perspective, 3D-only ] )
 *
 * where the 'scale-' arguments are unitless multipliers of the x and y dimensions
 * and perspective, which works the same as the stand-alone perspective property/mixin
 * but applies to the individual element (multiplied with any parent perspective)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	iç;@o;;[o;;[ ;"
trans;0;	iö;o;
;{ ; [o;	;"scale-x;"scale_x;	iö;@o;	;"scale-y;"scale_y;	iö;@;"
scale;	iö;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei÷:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i÷:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i÷;	@	;"perspective;i÷;	@	o; 	;"
trans;"
trans;i÷;	@	;i÷;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	iø;@o;	;"only3d;"only3d;	iø;@;"transform;	iø;@; [	[o;;"scale-x;"scale_x;@o;	;"default-scale-x;"default_scale_x;	iñ;@[o;;"scale-y;"scale_y;@o;	;"scale-x;"scale_x;	iò;@[o;;"perspective;"perspective;@o;);F;	ió;@[o;;"only3d;"only3d;@o;);F;	iô;@;"
scale;%T;	iõ;@o;;0;["¨/* Scale an object along the x axis
 * @include scaleX( [ scale-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	iû;@o;;[o;;[ ;"
trans;0;	i;o;
;{ ; [o;	;"
scale;"
scale;	i;@;"scaleX;	i;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i;	@	;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i;@o;	;"only3d;"only3d;	i;@;"transform;	i;@; [[o;;"
scale;"
scale;@o;	;"default-scale-x;"default_scale_x;	i ;@[o;;"perspective;"perspective;@o;);F;	i;@[o;;"only3d;"only3d;@o;);F;	i;@;"scaleX;%T;	i;@o;;0;["¨/* Scale an object along the y axis
 * @include scaleY( [ scale-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i	;@o;;[o;;[ ;"
trans;0;	i;o;
;{ ; [o;	;"
scale;"
scale;	i;@;"scaleY;	i;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i;	@	;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i;@o;	;"only3d;"only3d;	i;@;"transform;	i;@; [[o;;"
scale;"
scale;@o;	;"default-scale-y;"default_scale_y;	i;@[o;;"perspective;"perspective;@o;);F;	i;@[o;;"only3d;"only3d;@o;);F;	i;@;"scaleY;%T;	i;@o;;0;["/* Scale an object along the z axis
 * @include scaleZ( [ scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i;@o;;[o;;[ ;"
trans;0;	i;o;
;{ ; [o;	;"
scale;"
scale;	i;@;"scaleZ;	i;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei :@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i :
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i ;	@	;"perspective;i ;	@	o; 	;"
trans;"
trans;i ;	@	;i ;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i!;@;"transform3d;	i!;@; [[o;;"
scale;"
scale;@o;	;"default-scale-z;"default_scale_z;	i;@[o;;"perspective;"perspective;@o;);F;	i;@;"scaleZ;%T;	i;@o;;0;["·/* Scale and object along all three axis
 * @include scale3d( [ scale-x, scale-y, scale-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i$;@o;;[o;;[ ;"
trans;0;	i.;o;
;{ ; [o;	;"scale-x;"scale_x;	i.;@o;	;"scale-y;"scale_y;	i.;@o;	;"scale-z;"scale_z;	i.;@;"scale3d;	i.;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei/:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i/:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i/;	@	;"perspective;i/;	@	o; 	;"
trans;"
trans;i/;	@	;i/;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i0;@;"transform3d;	i0;@; [	[o;;"scale-x;"scale_x;@o;	;"default-scale-x;"default_scale_x;	i);@[o;;"scale-y;"scale_y;@o;	;"default-scale-y;"default_scale_y;	i*;@[o;;"scale-z;"scale_z;@o;	;"default-scale-z;"default_scale_z;	i+;@[o;;"perspective;"perspective;@o;);F;	i,;@;"scale3d;%T;	i-;@o;;0;["m/* @doc off
 * Rotate --------------------------------------------------------------------
 * @doc on */;[ ;i ;	i3;@o;;0;["ü/* Rotate an object around the z axis  (2D)
 * @include rotate( [ rotation, perspective, 3D-only ] )
 * where 'rotation' is an angle set in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i7;@o;;[o;;[ ;"
trans;0;	iA;o;
;{ ; [o;	;"rotate;"rotate;	iA;@;"rotate;	iA;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@lineiB:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;iB:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;iB;	@	;"perspective;iB;	@	o; 	;"
trans;"
trans;iB;	@	;iB;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	iC;@o;	;"only3d;"only3d;	iC;@;"transform;	iC;@; [[o;;"rotate;"rotate;@o;	;"default-rotate;"default_rotate;	i=;@[o;;"perspective;"perspective;@o;);F;	i>;@[o;;"only3d;"only3d;@o;);F;	i?;@;"rotate;%T;	i@;@o;;0;["/* A longcut for 'rotate' in case you forget that 'z' is implied
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	iF;@o;;[o;*;[ ;{ ; [o;	;"rotate;"rotate;	iN;@o;	;"perspective;"perspective;	iN;@o;	;"only3d;"only3d;	iN;@;"rotate;	iN;@; [[o;;"rotate;"rotate;@o;	;"default-rotate;"default_rotate;	iJ;@[o;;"perspective;"perspective;@o;);F;	iK;@[o;;"only3d;"only3d;@o;);F;	iL;@;"rotateZ;%T;	iM;@o;;0;["¨/* Rotate an object around the x axis (3D)
 * @include rotateX( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	iQ;@o;;[o;;[ ;"
trans;0;	iY;o;
;{ ; [o;	;"rotate;"rotate;	iY;@;"rotateX;	iY;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@lineiZ:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;iZ:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;iZ;	@	;"perspective;iZ;	@	o; 	;"
trans;"
trans;iZ;	@	;iZ;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i[;@;"transform3d;	i[;@; [[o;;"rotate;"rotate;@o;	;"default-rotate;"default_rotate;	iV;@[o;;"perspective;"perspective;@o;);F;	iW;@;"rotateX;%T;	iX;@o;;0;["§/* Rotate an object around the y axis (3D)
 * @include rotate( [ rotation, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i^;@o;;[o;;[ ;"
trans;0;	if;o;
;{ ; [o;	;"rotate;"rotate;	if;@;"rotateY;	if;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@lineig:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;ig:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;ig;	@	;"perspective;ig;	@	o; 	;"
trans;"
trans;ig;	@	;ig;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	ih;@;"transform3d;	ih;@; [[o;;"rotate;"rotate;@o;	;"default-rotate;"default_rotate;	ic;@[o;;"perspective;"perspective;@o;);F;	id;@;"rotateY;%T;	ie;@o;;0;["¤/* Rotate an object around an arbitrary axis (3D)
 * @include rotate( [ vector-x, vector-y, vector-z, rotation, perspective ] )
 * where the 'vector-' arguments accept unitless numbers
 * these numbers are not important on their own, but in relation to one another
 * creating an axis from your transform-origin, along the axis of Xx = Yy = Zz
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	ik;@o;;[o;;[ ;"
trans;0;	iy;o;
;{ ; [	o;	;"vector-x;"vector_x;	iy;@o;	;"vector-y;"vector_y;	iy;@o;	;"vector-z;"vector_z;	iy;@o;	;"rotate;"rotate;	iy;@;"rotate3d;	iy;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@lineiz:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;iz:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;iz;	@	;"perspective;iz;	@	o; 	;"
trans;"
trans;iz;	@	;iz;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i{;@;"transform3d;	i{;@; [
[o;;"vector-x;"vector_x;@o;	;"default-vector-x;"default_vector_x;	is;@[o;;"vector-y;"vector_y;@o;	;"default-vector-y;"default_vector_y;	it;@[o;;"vector-z;"vector_z;@o;	;"default-vector-z;"default_vector_z;	iu;@[o;;"rotate;"rotate;@o;	;"default-rotate;"default_rotate;	iv;@[o;;"perspective;"perspective;@o;);F;	iw;@;"rotate3d;%T;	ix;@o;;0;["m/* @doc off
 * Translate -----------------------------------------------------------------
 * @doc on */;[ ;i ;	i~;@o;;0;["5/* Move an object along the x or y axis (2D)
 * @include translate( [ translate-x, translate-y, perspective, 3D-only ] )
 * where the 'translate-' arguments accept any distance in percentages or absolute (px, cm, in, em etc..) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i;@o;;[o;;[ ;"
trans;0;	i;o;
;{ ; [o;	;"translate-x;"translate_x;	i;@o;	;"translate-y;"translate_y;	i;@;"translate;	i;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i;	@	;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i;@o;	;"only3d;"only3d;	i;@;"transform;	i;@; [	[o;;"translate-x;"translate_x;@o;	;"default-translate-x;"default_translate_x;	i;@[o;;"translate-y;"translate_y;@o;	;"default-translate-y;"default_translate_y;	i;@[o;;"perspective;"perspective;@o;);F;	i;@[o;;"only3d;"only3d;@o;);F;	i;@;"translate;%T;	i;@o;;0;["³/* Move an object along the x axis (2D)
 * @include translate( [ translate-x, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i;@o;;[o;;[ ;"
trans;0;	i;o;
;{ ; [o;	;"trans-x;"trans_x;	i;@;"translateX;	i;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i;	@	;"perspective;i;	@	o; 	;"
trans;"
trans;i;	@	;i;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i;@o;	;"only3d;"only3d;	i;@;"transform;	i;@; [[o;;"trans-x;"trans_x;@o;	;"default-translate-x;"default_translate_x;	i;@[o;;"perspective;"perspective;@o;);F;	i;@[o;;"only3d;"only3d;@o;);F;	i;@;"translateX;%T;	i;@o;;0;["³/* Move an object along the y axis (2D)
 * @include translate( [ translate-y, perspective, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i ;@o;;[o;;[ ;"
trans;0;	i©;o;
;{ ; [o;	;"trans-y;"trans_y;	i©;@;"translateY;	i©;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@lineiª:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;iª:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;iª;	@	;"perspective;iª;	@	o; 	;"
trans;"
trans;iª;	@	;iª;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i«;@o;	;"only3d;"only3d;	i«;@;"transform;	i«;@; [[o;;"trans-y;"trans_y;@o;	;"default-translate-y;"default_translate_y;	i¥;@[o;;"perspective;"perspective;@o;);F;	i¦;@[o;;"only3d;"only3d;@o;);F;	i§;@;"translateY;%T;	i¨;@o;;0;["ª/* Move an object along the z axis (3D)
 * @include translate( [ translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i®;@o;;[o;;[ ;"
trans;0;	i¶;o;
;{ ; [o;	;"trans-z;"trans_z;	i¶;@;"translateZ;	i¶;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei·:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i·:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i·;	@	;"perspective;i·;	@	o; 	;"
trans;"
trans;i·;	@	;i·;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	i¸;@;"transform3d;	i¸;@; [[o;;"trans-z;"trans_z;@o;	;"default-translate-z;"default_translate_z;	i³;@[o;;"perspective;"perspective;@o;);F;	i´;@;"translateZ;%T;	iµ;@o;;0;["Í/* Move an object along the x, y and z axis (3D)
 * @include translate( [ translate-x, translate-y, translate-z, perspective ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	i»;@o;;[o;;[ ;"
trans;0;	iÅ;o;
;{ ; [o;	;"translate-x;"translate_x;	iÅ;@o;	;"translate-y;"translate_y;	iÅ;@o;	;"translate-z;"translate_z;	iÅ;@;"translate3d;	iÅ;@;@u;$[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@lineiÆ:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;iÆ:
@expro:Sass::Script::List	:@value[o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;iÆ;	@	;"perspective;iÆ;	@	o; 	;"
trans;"
trans;iÆ;	@	;iÆ;	@	:@separator:
space;	@	o;*;[ ;{ ; [o;	;"
trans;"
trans;	iÇ;@;"transform3d;	iÇ;@; [	[o;;"translate-x;"translate_x;@o;	;"default-translate-x;"default_translate_x;	iÀ;@[o;;"translate-y;"translate_y;@o;	;"default-translate-y;"default_translate_y;	iÁ;@[o;;"translate-z;"translate_z;@o;	;"default-translate-z;"default_translate_z;	iÂ;@[o;;"perspective;"perspective;@o;);F;	iÃ;@;"translate3d;%T;	iÄ;@o;;0;["m/* @doc off
 * Skew ----------------------------------------------------------------------
 * @doc on */;[ ;i ;	iÊ;@o;;0;["ò/* Skew an element:
 *
 *     @include skew( [ skew-x, skew-y, 3D-only ] )
 *
 * where the 'skew-' arguments accept css angles in degrees (deg) or radian (rad) units
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	iÎ;@o;;[o;;[ ;"
trans;0;	iÚ;o;
;{ ; [o;	;"skew-x;"skew_x;	iÚ;@o;	;"skew-y;"skew_y;	iÚ;@;"	skew;	iÚ;@;@o;*;[ ;{ ; [o;	;"
trans;"
trans;	iÛ;@o;	;"only3d;"only3d;	iÛ;@;"transform;	iÛ;@; [[o;;"skew-x;"skew_x;@o;	;"default-skew-x;"default_skew_x;	iÖ;@[o;;"skew-y;"skew_y;@o;	;"default-skew-y;"default_skew_y;	i×;@[o;;"only3d;"only3d;@o;);F;	iØ;@;"	skew;%T;	iÙ;@o;;0;["/* Skew an element along the x axiz
 *
 *     @include skew( [ skew-x, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	iÞ;@o;;[o;;[ ;"
trans;0;	iç;o;
;{ ; [o;	;"skew-x;"skew_x;	iç;@;"
skewX;	iç;@;@o;*;[ ;{ ; [o;	;"
trans;"
trans;	iè;@o;	;"only3d;"only3d;	iè;@;"transform;	iè;@; [[o;;"skew-x;"skew_x;@o;	;"default-skew-x;"default_skew_x;	iä;@[o;;"only3d;"only3d;@o;);F;	iå;@;"
skewX;%T;	iæ;@o;;0;["/* Skew an element along the y axis
 *
 *     @include skew( [ skew-y, 3D-only ] )
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	ië;@o;;[o;;[ ;"
trans;0;	iô;o;
;{ ; [o;	;"skew-y;"skew_y;	iô;@;"
skewY;	iô;@;@o;*;[ ;{ ; [o;	;"
trans;"
trans;	iõ;@o;	;"only3d;"only3d;	iõ;@;"transform;	iõ;@; [[o;;"skew-y;"skew_y;@o;	;"default-skew-y;"default_skew_y;	iñ;@[o;;"only3d;"only3d;@o;);F;	iò;@;"
skewY;%T;	ió;@o;;0;["/* Full transform mixins
 * For settings any combination of transforms as arguments
 * These are complex and not highly recommended for daily use
 * They are mainly here for backwards-compatability purposes
 *
 * * they include origin adjustments
 * * scale takes a multiplier (unitless), rotate and skew take degrees (deg)
 *
 * **Note** This mixin cannot be combined with other transform mixins. */;[ ;i ;	iù;@o;;[o;;[ ;"
trans;0;	i;o;
;{ ; [o;&	;" ;';(;	i;@;"unquote;	i;@;@o;;0;["/* perspective */;[ ;i ;	i;@u;$.[o:Sass::Script::Variable	:
@name"perspective:@underscored_name"perspective:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i:
@expro:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"perspective;"perspective;i;	@	;"perspective;i;	@	;	@	o;;0;["/* scale */;[ ;i ;	i;@u;$Ê[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@name"scale-y:@underscored_name"scale_y:
@linei:@options{ :@operand1o;	;"scale-x;	"scale_x;
i;@
;
i;@
:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodev[o:Sass::Script::Variable	:
@name"scale-x:@underscored_name"scale_x:
@linei:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"scale-x;"scale_x;i;	@	;"scaleX;i;	@	;i;	@	:@separator:
space;	@	u; v[o:Sass::Script::Variable	:
@name"scale-y:@underscored_name"scale_y:
@linei :@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i :
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i ;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"scale-y;"scale_y;i ;	@	;"scaleY;i ;	@	;i ;	@	:@separator:
space;	@	u; v[o:Sass::Script::Variable	:
@name"scale-z:@underscored_name"scale_z:
@linei!:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i!:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i!;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"scale-z;"scale_z;i!;	@	;"scaleZ;i!;	@	;i!;	@	:@separator:
space;	@	[u;L[o:Sass::Script::Variable	:
@name"scale-z:@underscored_name"scale_z:
@linei:@options{ u:Sass::Tree::IfNodev[00[o:Sass::Tree::VariableNode:@children[ :
@name"
trans:@guarded0:
@linei:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;"
trans:@underscored_name"
trans;	i:@options{ o:Sass::Script::Funcall
:@keywords{ :
@args[o;	;"scale-x;"scale_x;	i;@o;	;"scale-y;"scale_y;	i;@;"
scale;	i;@;	i;@:@separator:
space;@[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"scale-x;"scale_x;i;	@	o; 	;"scale-y;"scale_y;i;	@	o; 	;"scale-z;"scale_z;i;	@	;"scale3d;i;	@	;i;	@	:@separator:
space;	@	o;;0;["/* rotate */;[ ;i ;	i$;@u;${[o:Sass::Script::Variable	:
@name"rotate-x:@underscored_name"rotate_x:
@linei%:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i%:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i%;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"rotate-x;"rotate_x;i%;	@	;"rotateX;i%;	@	;i%;	@	:@separator:
space;	@	u;${[o:Sass::Script::Variable	:
@name"rotate-y:@underscored_name"rotate_y:
@linei&:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i&:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i&;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"rotate-y;"rotate_y;i&;	@	;"rotateY;i&;	@	;i&;	@	:@separator:
space;	@	u;${[o:Sass::Script::Variable	:
@name"rotate-z:@underscored_name"rotate_z:
@linei':@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i':
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i';	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"rotate-z;"rotate_z;i';	@	;"rotateZ;i';	@	;i';	@	:@separator:
space;	@	u;$|[o:Sass::Script::Variable	:
@name"rotate3d:@underscored_name"rotate3d:
@linei(:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i(:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i(;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"rotate3d;"rotate3d;i(;	@	;"rotate3d;i(;	@	;i(;	@	:@separator:
space;	@	o;;0;["/* translate */;[ ;i ;	i*;@u;$Þ[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@name"trans-y:@underscored_name"trans_y:
@linei+:@options{ :@operand1o;	;"trans-x;	"trans_x;
i+;@
;
i+;@
:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodez[o:Sass::Script::Variable	:
@name"trans-x:@underscored_name"trans_x:
@linei/:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i/:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i/;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"trans-x;"trans_x;i/;	@	;"translateX;i/;	@	;i/;	@	:@separator:
space;	@	u; z[o:Sass::Script::Variable	:
@name"trans-y:@underscored_name"trans_y:
@linei0:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i0:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i0;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"trans-y;"trans_y;i0;	@	;"translateY;i0;	@	;i0;	@	:@separator:
space;	@	u; z[o:Sass::Script::Variable	:
@name"trans-z:@underscored_name"trans_z:
@linei1:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i1:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i1;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"trans-z;"trans_z;i1;	@	;"translateZ;i1;	@	;i1;	@	:@separator:
space;	@	[u;T[o:Sass::Script::Variable	:
@name"trans-z:@underscored_name"trans_z:
@linei,:@options{ u:Sass::Tree::IfNodez[00[o:Sass::Tree::VariableNode:@children[ :
@name"
trans:@guarded0:
@linei-:
@expro:Sass::Script::List	:@value[o:Sass::Script::Variable	;"
trans:@underscored_name"
trans;	i-:@options{ o:Sass::Script::Funcall
:@keywords{ :
@args[o;	;"trans-x;"trans_x;	i-;@o;	;"trans-y;"trans_y;	i-;@;"translate;	i-;@;	i-;@:@separator:
space;@[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i,:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i,;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"trans-x;"trans_x;i,;	@	o; 	;"trans-y;"trans_y;i,;	@	o; 	;"trans-z;"trans_z;i,;	@	;"translate3d;i,;	@	;i,;	@	:@separator:
space;	@	o;;0;["/* skew */;[ ;i ;	i4;@u;$[o:Sass::Script::Operation
:@operand2o:Sass::Script::Variable	:
@name"skew-y:@underscored_name"skew_y:
@linei5:@options{ :@operand1o;	;"skew-x;	"skew_x;
i5;@
;
i5;@
:@operator:andu:Sass::Tree::IfNode[00[u:Sass::Tree::IfNodeq[o:Sass::Script::Variable	:
@name"skew-x:@underscored_name"skew_x:
@linei7:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i7:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i7;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"skew-x;"skew_x;i7;	@	;"
skewX;i7;	@	;i7;	@	:@separator:
space;	@	u; q[o:Sass::Script::Variable	:
@name"skew-y:@underscored_name"skew_y:
@linei8:@options{ 0[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;i8:
@expro:Sass::Script::List	:@value[o; 	;"
trans;"
trans;i8;	@	o:Sass::Script::Funcall
:@keywords{ :
@args[o; 	;"skew-y;"skew_y;i8;	@	;"
skewY;i8;	@	;i8;	@	:@separator:
space;	@	[o:Sass::Tree::VariableNode:@children[ ;"
trans:@guarded0;
i5:
@expro:Sass::Script::List	:@value[o;	;"
trans;	"
trans;
i5;@
o:Sass::Script::Funcall
:@keywords{ :
@args[o;	;"skew-x;	"skew_x;
i5;@
o;	;"skew-y;	"skew_y;
i5;@
;"	skew;
i5;@
;
i5;@
:@separator:
space;@
o;;0;["/* apply it! */;[ ;i ;	i;;@o;*;[ ;{ ; [o;	;"
trans;"
trans;	i<;@o;	;"only3d;"only3d;	i<;@;"transform;	i<;@o;*;[ ;{ ; [	o;	;"origin-x;"origin_x;	i=;@o;	;"origin-y;"origin_y;	i=;@o;	;"origin-z;"origin_z;	i=;@o;	;"only3d;"only3d;	i=;@;"transform-origin;	i=;@; [[o;;"perspective;"perspective;@o;);F;	i;@[o;;"scale-x;"scale_x;@o;);F;	i;@[o;;"scale-y;"scale_y;@o;);F;	i;@[o;;"scale-z;"scale_z;@o;);F;	i;@[o;;"rotate-x;"rotate_x;@o;);F;	i;@[o;;"rotate-y;"rotate_y;@o;);F;	i;@[o;;"rotate-z;"rotate_z;@o;);F;	i	;@[o;;"rotate3d;"rotate3d;@o;);F;	i
;@[o;;"trans-x;"trans_x;@o;);F;	i;@[o;;"trans-y;"trans_y;@o;);F;	i;@[o;;"trans-z;"trans_z;@o;);F;	i;@[o;;"skew-x;"skew_x;@o;);F;	i;@[o;;"skew-y;"skew_y;@o;);F;	i;@[o;;"origin-x;"origin_x;@o;);F;	i;@[o;;"origin-y;"origin_y;@o;);F;	i;@[o;;"origin-z;"origin_z;@o;);F;	i;@[o;;"only3d;"only3d;@o;);F;	i;@;"create-transform;%T;	i;@o;;0;["q/* A simplified set of options
 * backwards-compatible with the previous version of the 'transform' mixin */;[ ;i ;	iA;@o;;[o;*;[ ;{ ; [o;);F;	iN;@o;	;"
scale;"
scale;	iO;@o;	;"
scale;"
scale;	iO;@o;);F;	iO;@o;);F;	iP;@o;);F;	iP;@o;	;"rotate;"rotate;	iP;@o;);F;	iP;@o;	;"trans-x;"trans_x;	iQ;@o;	;"trans-y;"trans_y;	iQ;@o;);F;	iQ;@o;	;"skew-x;"skew_x;	iR;@o;	;"skew-y;"skew_y;	iR;@o;	;"origin-x;"origin_x;	iS;@o;	;"origin-y;"origin_y;	iS;@o;);F;	iS;@o;);F;	iT;@;"create-transform;	iU;@; [[o;;"
scale;"
scale;@o;);F;	iD;@[o;;"rotate;"rotate;@o;);F;	iE;@[o;;"trans-x;"trans_x;@o;);F;	iF;@[o;;"trans-y;"trans_y;@o;);F;	iG;@[o;;"skew-x;"skew_x;@o;);F;	iH;@[o;;"skew-y;"skew_y;@o;);F;	iI;@[o;;"origin-x;"origin_x;@o;);F;	iJ;@[o;;"origin-y;"origin_y;@o;);F;	iK;@;"simple-transform;%T;	iL;@;%T;	i;@